#include <string>
#include <vector>
#include <algorithm>

using namespace std;

//크루스칼 알고리즘

int set[101]; //node의 parent를 저장하는 배열

int getParent(int node) {
    if(set[node]==node) return node;
    return set[node] = getParent(set[node]);
}

bool cmp(vector<int> a, vector<int> b){
    return a[2] < b[2];
}

int solution(int n, vector<vector<int>> costs) {
    int answer = 0;
    for(int i=0; i<n; i++)
        set[i]=i;
    
    sort(costs.begin(), costs.end(), cmp);
    
    for(int i=0; i<costs.size(); i++){
        int start = getParent(costs[i][0]);
        int end = getParent(costs[i][1]);
        int currentCost = costs[i][2];
        //연결할 두 노드의 parent가 다르다면(연결 가능 상태)
        if(start!=end) {
            set[end] = start;
            answer += currentCost;
        }
        
    }
    return answer;
}
